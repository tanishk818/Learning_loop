<%- include('../partials/Level_Template')%>

  <div class="container-fluid py-5 my-5">
    <h5%- include('../partials/flash')%>
      <!-- win_modal -->
      <div id="winModal" class="modal fade" role="dialog">
        <div class="modal-dialog " role="content">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-body">
              <div class="row">
                <div class="col-lg-12 col-sm-12 col-xs-12">
                  <img src="/img/win.jpeg" class="img-fluid">
                </div>
              </div>
              <div class="quote">
                <blockquote>Winning solves everything.</blockquote>
              </div>
              <a class="btn btn-primary" href="/levels" role="button">All Levels</a>
              <a class="btn btn-success" href="2" role="button">Next Level!</a>
            </div>
          </div>
        </div>
      </div>
      <div id="lossModal" class="modal fade" role="dialog">
        <div class="modal-dialog " role="content">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-body">
              <div class="row">
                <div class="col-lg-12 col-sm-12 col-xs-12">
                  <img src="/img/loss.jpeg" class="img-fluid">
                </div>
              </div>
              <div class="quote">
                <blockquote>Winning provides happiness.Loosing provides wisdom</blockquote>
              </div>
              <a class="btn btn-primary" href="/levels" role="button">All Levels</a>
              <a class="btn btn-danger" href="/lev/1" role="button">Try Again</a>
            </div>
          </div>
        </div>
      </div>
      <!-- This is the main content -->
      <h2 class="level-no">Level 1</h2>
      <div class="main-content">

        <svg height="600" width="320" xmlns="http://www.w3.org/2000/svg">
          <%- include('../partials/mac_window.ejs') %>
            <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="#F76C6C" filter="url(#inset-shadow)" />
            <circle cx="160" cy="50" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="50" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="50" cy="50" r="20" stroke="black" stroke-width="3" fill="white" filter="url(#inset-shadow)" />
            <circle cx="50" cy="160" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="160" cy="160" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="160" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="50" cy="270" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="160" cy="270" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="270" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="50" cy="380" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="160" cy="380" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="380" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="50" cy="490" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="160" cy="490" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="490" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
        </svg>
        <div class="code-steps code">
          <h3 class="code-heading">Instructions</h3>
          <p class="code-step"></p>
          <p class="code-step"></p>
          <p class="code-step"></p>
        </div>
      </div>
      <%- include('../partials/key.ejs') %>
        <script src="/js/three.js"></script>
        <script src="/js/three.min.js"></script>
        <%- include('../partials/script.ejs') %>
          <script>
            let i = 0;
            let count = 0;
            let visibilityKey = [{
              x: 0,
            },
            {
              y: "visible"
            },
            {
              y: "hidden"
            }];

            let levels = [
              {
                lev: [1, 1, 1]
              }
            ];
            print();
            let temp;
            let keyVisible = 1;
            let keyCount = 1;
            let radiusvalue = {}
            let value = {}
            let isPlaying = true;
            let t1 = anime.timeline({
              easing: 'easeOutElastic(1, .8)',
              autoplay: true,
              loop: true,
              duration: 4000
            });
            let t2 = anime.timeline({
              easing: 'easeOutElastic(1, .8)',
              autoplay: true,
              loop: true,
              duration: 4000
            });
            Init();
            Idle();
            document.addEventListener("keydown", onDocumentKeyDown, false);
            function onDocumentKeyDown(event) {
              let keyCode = event.which;
              if (keyCode == 38 && isPlaying) {
                UpMove()
              } else if (keyCode == 40 && isPlaying) {
                DownMove()
              } else if (keyCode == 37 && isPlaying) {
                LeftMove();
              } else if (keyCode == 39 && isPlaying) {
                RightMove();
              }
              else {
                Idle();
              }
            };
            function Init() {
              t2.add({
                targets: visibilityKey,
                duration: 10000,
                easing: 'linear',
                autoplay: true,
                loop: true,
                update: function () {
                  document.getElementsByClassName("right arr")[0].firstChild.style.visibility = visibilityKey[keyCount].y;
                  keyVisible++;
                  if (keyVisible == 0) {
                    keyVisible = 1;
                  }
                  if (keyVisible == 20 && keyCount == 1) {
                    keyVisible = 2;
                    keyCount = 2;
                  }
                  if (keyVisible == 20 && keyCount == 2) {
                    keyVisible = 1;
                    keyCount = 1;
                  }
                },
                complete: function () { }
              });
              t2.play();
            }
            function sound(src) {
              this.sound = document.createElement("audio");
              this.sound.src = src;
              this.sound.setAttribute("preload", "auto");
              this.sound.setAttribute("controls", "none");
              this.sound.style.display = "none";
              document.body.appendChild(this.sound);
              this.play = function () {
                this.sound.play();
              }
              this.stop = function () {
                this.sound.pause();
              }
            }
            function Idle() {
              console.log("I am in");
              radiusvalue.x = document.getElementsByTagName("circle")[3].getAttribute("r");
              t1.add({
                targets: radiusvalue,
                keyframes: [
                  { x: 25 },
                  { x: 20 }
                ],
                duration: 1000,
                easing: 'linear',
                autoplay: true,
                loop: true,
                update: function () {
                  document.getElementsByTagName("circle")[3].setAttribute("r", radiusvalue.x);
                },
                complete: function () { }
              });
              t1.play();
              console.log(t1);
            }
            function RightMove() {
              myMusic = new sound("/Drip.wav");
              myMusic.play();
              value.x = + document.getElementsByTagName("circle")[3].getAttribute("cx");
              temp = + document.getElementsByTagName("circle")[3].getAttribute("cx") + +110;
              check(1);
              print();
              if (temp >= 380) {
                temp = 50;
              }
              anime({
                targets: value,
                x: temp,
                duration: 300,
                autoplay: true,
                update: function () {
                  document.getElementsByTagName("circle")[3].setAttribute("cx", value.x);
                },
                easing: 'easeInOutSine'
              });
            }
            function LeftMove() {
              temp = document.getElementsByTagName("circle")[3].getAttribute("cx");
              myMusic = new sound("/Drip.wav");
              myMusic.play();
              value.x = document.getElementsByTagName("circle")[3].getAttribute("cx");
              temp = temp - 110;
              check(-1);
              print();
              if (temp < 0) {
                temp = 270
              }
              anime({
                targets: value,
                x: temp,
                duration: 300,
                autoplay: true,
                update: function () {
                  document.getElementsByTagName("circle")[3].setAttribute("cx", value.x);
                },
                easing: 'easeInOutSine'
              });
            }
            function DownMove() {
              temp = document.getElementsByTagName("circle")[3].getAttribute("cy");
              myMusic = new sound("/InvalidMove.wav");
              myMusic.play();
              value.x = document.getElementsByTagName("circle")[3].getAttribute("cy");
              temp = + document.getElementsByTagName("circle")[3].getAttribute("cy") + +110;
              check(-2);
              print();
              if (temp > 50) {
                temp = 50
              }
              console.log("for left move " + temp)
              anime({
                targets: value,
                x: temp,
                duration: 300,
                autoplay: true,
                update: function () {
                  document.getElementsByTagName("circle")[3].setAttribute("cy", value.x);
                },
                easing: 'easeInOutSine'
              });
            }
            function UpMove() {
              temp = document.getElementsByTagName("circle")[3].getAttribute("cy");
              myMusic = new sound("/InvalidMove.wav");
              myMusic.play();
              value.x = document.getElementsByTagName("circle")[3].getAttribute("cy");
              temp = temp + +110
              check(2);
              print();
              if (temp > 380) {
                temp = 50
              }
              console.log("for left move " + temp)
              anime({
                targets: value,
                x: temp,
                duration: 300,
                autoplay: true,
                update: function () {
                  document.getElementsByTagName("circle")[3].setAttribute("cy", value.x);
                },
                easing: 'easeInOutSine'
              });
            }
            function check(x) {
              if (levels[i].lev[count++] === x) {
              }
              else {
                count = 0;
                value.x = 50;
                temp = 50;
                document.getElementsByTagName("circle")[3].setAttribute("cx", value.x);
                document.getElementsByTagName("circle")[3].setAttribute("cy", value.x);
                isPlaying = false
                $('#lossModal').modal('show');
              }
              if (count === levels[i].lev.length) {
                count = 0;
                isPlaying = false
                $('#winModal').modal('show');
              }
            }
            function print() {
              let text = document.getElementsByClassName("code-step");
              for (let j = 0; j < 3; j++) {
                if (levels[i].lev[j] === 1)
                  text[j].textContent = "right()";
                else if (levels[i].lev[j] === -1)
                  text[j].textContent = "left()";
                else if (levels[i].lev[j] === 2)
                  text[j].textContent = "up()";
                else
                  text[j].textContent = "down()";
              }
              for (let j = 0; j < count; j++) {
                text[j].style.color = "#39FF14";
              }
              for (let j = count; j < 3; j++) {
                text[j].style.color = "red";
              }
            }
          </script>
  </div>

  <%- include('../partials/Level_Template_Footer')%>