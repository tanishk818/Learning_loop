<%- include('../partials/Level_Template')%>

  <div class="container-fluid py-5 my-5">
    <h5%- include('../partials/flash')%>
      <!-- win_modal -->
      <div id="winModal" class="modal fade" role="dialog">
        <div class="modal-dialog " role="content">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-body">
              <div class="row">
                <div class="col-lg-12 col-sm-12 col-xs-12">
                  <img src="/img/win.jpeg" class="img-fluid">
                </div>
              </div>
              <br/>
              <a class="btn btn-primary" href="/levels" role="button">All Levels</a>
              <a class="btn btn-success button-right" href="4" role="button">Next Level!</a>
            </div>
          </div>
        </div>
      </div>
      <div id="lossModal" class="modal fade" role="dialog">
        <div class="modal-dialog " role="content">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-body">
              <div class="row">
                <div class="col-lg-12 col-sm-12 col-xs-12">
                  <img src="/img/loss.jpeg" class="img-fluid">
                </div>
              </div>
              <br/>
              <a class="btn btn-primary" href="/levels" role="button">All Levels</a>
              <a class="btn btn-danger button-right" href="/lev/3" role="button">Try Again</a>
            </div>
          </div>
        </div>
      </div>
      <!-- This is the main content -->
      <h2 class="level-no">Level 3</h2>
      <div class="main-content">

        <svg height="600" width="320" xmlns="http://www.w3.org/2000/svg">
          <%- include('../partials/mac_window.ejs') %>
            <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="green" filter="url(#inset-shadow)" />

            <circle cx="160" cy="50" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="50" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />

            <circle cx="50" cy="160" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="160" cy="160" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="160" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="50" cy="270" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="160" cy="270" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="270" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="50" cy="380" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="160" cy="380" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="380" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="50" cy="490" r="40" stroke="black" stroke-width="3" fill="#F76C6C"
              filter="url(#inset-shadow)" />
            <circle cx="160" cy="490" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="270" cy="490" r="40" stroke="black" stroke-width="3" fill="#FDD20E"
              filter="url(#inset-shadow)" />
            <circle cx="50" cy="50" r="20" stroke="black" stroke-width="3" fill="white" filter="url(#inset-shadow)" />
        </svg>
        <div class="code-steps code">
          <h3 class="code-heading">Instructions</h3>
          <p class="code-step if-else">if <span class="dot"></span></p>
          <p class="code-step lurd" style="text-indent: 25%;"></p>
          <p class="code-step if-else">else</p>
          <p class="code-step lurd" style="text-indent: 25%;"></p>
        </div>
      </div>
      <%- include('../partials/key.ejs') %>
        <script src="/js/three.js"></script>
        <script src="/js/three.min.js"></script>
        <%- include('../partials/script.ejs') %>
          <script>
            var i = 3;
            var count = 0;
            var visibilityKey = [{
              x: 0,
            },
            {
              y: "visible"
            },
            {
              y: "hidden"
            }];

            var levels = [
              {
                lev: [1, 1, 1],
              },
              {
                lev: [-2, -2, -2, -2, 1, 1, 2, 2, 2, 2, 1, 1]
              },
              {
                lev: [1, -2, 1, -2, -1, -2, 1, -2, -2, 1]
              },
              {
                lev: [1, -1],
                win: [1]
              }
            ];
            print();
            var temp;
            var keyVisible = 1;
            var keyCount = 1;
            var radiusvalue = {}
            var value = {}
            let isPlaying = true
            // value.x = document.getElementsByTagName("circle")[3].getAttribute("cx")
            var t1 = anime.timeline({
              easing: 'easeOutElastic(1, .8)',
              autoplay: true,
              loop: true,
              duration: 4000
            });
            var t2 = anime.timeline({
              easing: 'easeOutElastic(1, .8)',
              autoplay: true,
              loop: true,
              duration: 4000
            });
            //Init();

            Idle();
            document.addEventListener("keydown", onDocumentKeyDown, false);
            function onDocumentKeyDown(event) {
              var keyCode = event.which;
              // up
              if (keyCode == 38 && isPlaying) {
                UpMove()
                // down
              } else if (keyCode == 40 && isPlaying) {
                DownMove()
                // left
              } else if (keyCode == 37 && isPlaying) {
                LeftMove();
                // right
              } else if (keyCode == 39 && isPlaying) {
                RightMove();
                // space
              } else {
                Idle();
              }

            }
            ;

            function Init() {
              t2.add({
                targets: visibilityKey,

                duration: 10000,
                easing: 'linear',
                autoplay: true,
                loop: true,
                update: function () {
                  //if (keyVisible == 1 || keyVisible == 2)
                  // {
                  document.getElementsByClassName("right arr")[0].firstChild.style.visibility = visibilityKey[keyCount].y;

                  //}

                  keyVisible++;
                  if (keyVisible == 0) {
                    keyVisible = 1;
                  }
                  if (keyVisible == 20 && keyCount == 1) {
                    keyVisible = 2;
                    keyCount = 2;
                  }
                  if (keyVisible == 20 && keyCount == 2) {
                    keyVisible = 1;
                    keyCount = 1;

                  }



                },
                complete: function () { }



              });
              t2.play();
            }
            function sound(src) {
              this.sound = document.createElement("audio");
              this.sound.src = src;
              this.sound.setAttribute("preload", "auto");
              this.sound.setAttribute("controls", "none");
              this.sound.style.display = "none";
              document.body.appendChild(this.sound);
              this.play = function () {
                this.sound.play();
              }
              this.stop = function () {
                this.sound.pause();
              }
            }
            function Idle() {

              radiusvalue.x = document.getElementsByTagName("circle")[15].getAttribute("r");
              t1.add({
                targets: radiusvalue,
                keyframes: [

                  { x: 25 },
                  { x: 20 }
                ],

                duration: 1000,
                easing: 'linear',
                autoplay: true,
                loop: true,
                update: function () {


                  document.getElementsByTagName("circle")[15].setAttribute("r", radiusvalue.x);


                },
                complete: function () { }



              });
              t1.play();

            }


            function check(x) {
              if (levels[i].win[count++] === x) {
                console.log("count : " + count);
              } else {
                count = 0;
                value.x = 50;
                temp = 50;
                console.log("count : " + count);
                console.log("you hit the wrong key");
                document.getElementsByTagName("circle")[15].setAttribute("cx", value.x);
                document.getElementsByTagName("circle")[15].setAttribute("cy", value.x);
                isPlaying = false
                $('#lossModal').modal({
                  backdrop: 'static',
                  keyboard: false
                });
                $('#lossModal').modal('show');
              }
              if (count === levels[i].win.length) {
                count = 0;
                console.log("you win the level");
                isPlaying = false
                $('#winModal').modal({
                  backdrop: 'static',
                  keyboard: false
                });
                $('#winModal').modal('show');
                //alert("can't stop the champion!bravo! you win the level");
              }
            }
            function print() {
              var text = document.getElementsByClassName("code-step");
              console.log(levels);
              for (var j = 0, k = 0; j < levels[i].lev.length; j++, k++) {
                var empt = text[k].innerHTML;
                console.log(empt);
                if (empt.length > 0) k++;
                if (levels[i].lev[j] === 1)
                  text[k].textContent = "right()";
                else if (levels[i].lev[j] === -1)
                  text[k].textContent = "left()";
                else if (levels[i].lev[j] === 2)
                  text[k].textContent = "up()";
                else
                  text[k].textContent = "down()";
              }
            }
          </script>
  </div>

  <%- include('../partials/Level_Template_Footer')%>